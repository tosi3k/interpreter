module SkelGrammar where

-- Haskell module generated by the BNF converter

import AbsGrammar
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  Prog stmts -> failure x
transType :: Type -> Result
transType x = case x of
  TInt -> failure x
  TBool -> failure x
  TString -> failure x
transBlck :: Blck -> Result
transBlck x = case x of
  Block stmts -> failure x
transStmt :: Stmt -> Result
transStmt x = case x of
  Empty -> failure x
  BStmt blck -> failure x
  VDecl type_ items -> failure x
  FDecl type_ ident args blck -> failure x
  Assign ident expr -> failure x
  Ret expr -> failure x
  Cont -> failure x
  Break -> failure x
  Cond expr stmt -> failure x
  CondElse expr stmt1 stmt2 -> failure x
  While expr stmt -> failure x
  Print expr -> failure x
  SExpr expr -> failure x
transArg :: Arg -> Result
transArg x = case x of
  ArgVal type_ ident -> failure x
  ArgRef type_ ident -> failure x
transItem :: Item -> Result
transItem x = case x of
  NoInit ident -> failure x
  Init ident expr -> failure x
transExpr :: Expr -> Result
transExpr x = case x of
  EVar ident -> failure x
  ELitInt integer -> failure x
  ELitTrue -> failure x
  ELitFalse -> failure x
  EApp ident exprs -> failure x
  EString string -> failure x
  ENeg expr -> failure x
  ENot expr -> failure x
  EMul expr1 mulop expr2 -> failure x
  EAdd expr1 addop expr2 -> failure x
  ERel expr1 relop expr2 -> failure x
  EAnd expr1 expr2 -> failure x
  EOr expr1 expr2 -> failure x
transAddOp :: AddOp -> Result
transAddOp x = case x of
  OpAdd -> failure x
  OpSub -> failure x
transMulOp :: MulOp -> Result
transMulOp x = case x of
  OpMul -> failure x
  OpDiv -> failure x
transRelOp :: RelOp -> Result
transRelOp x = case x of
  OpLt -> failure x
  OpLe -> failure x
  OpGt -> failure x
  OpGe -> failure x
  OpEq -> failure x
  OpNeq -> failure x

