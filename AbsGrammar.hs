

module AbsGrammar where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
data Program = Prog [Stmt]
  deriving (Eq, Ord, Show, Read)

data Type = TInt | TBool | TString
  deriving (Eq, Ord, Show, Read)

data Blck = Block [Stmt]
  deriving (Eq, Ord, Show, Read)

data Stmt
    = Empty
    | BStmt Blck
    | VDecl Type [Item]
    | FDecl Type Ident [Arg] Blck
    | Assign Ident Expr
    | Ret Expr
    | Cont
    | Break
    | Cond Expr Stmt
    | CondElse Expr Stmt Stmt
    | While Expr Stmt
    | Print Expr
    | SExpr Expr
  deriving (Eq, Ord, Show, Read)

data Arg = ArgVal Type Ident | ArgRef Type Ident
  deriving (Eq, Ord, Show, Read)

data Item = NoInit Ident | Init Ident Expr
  deriving (Eq, Ord, Show, Read)

data Expr
    = EVar Ident
    | ELitInt Integer
    | ELitTrue
    | ELitFalse
    | EApp Ident [Expr]
    | EString String
    | ENeg Expr
    | ENot Expr
    | EMul Expr MulOp Expr
    | EAdd Expr AddOp Expr
    | ERel Expr RelOp Expr
    | EAnd Expr Expr
    | EOr Expr Expr
  deriving (Eq, Ord, Show, Read)

data AddOp = OpAdd | OpSub
  deriving (Eq, Ord, Show, Read)

data MulOp = OpMul | OpDiv
  deriving (Eq, Ord, Show, Read)

data RelOp = OpLt | OpLe | OpGt | OpGe | OpEq | OpNeq
  deriving (Eq, Ord, Show, Read)

